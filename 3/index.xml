<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3s on Ameba Accessibility Guidelines</title>
    <link>https://openameba.github.io/a11y-guidelines/3/</link>
    <description>Recent content in 3s on Ameba Accessibility Guidelines</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://openameba.github.io/a11y-guidelines/3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3.1.1 ページの言語を指定する</title>
      <link>https://openameba.github.io/a11y-guidelines/3/1/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/1/1/</guid>
      <description> 3.1.1 ページの言語を指定する プログラムが解釈できるように、Webページのデフォルトの言語を指定する。
詳細 html要素のlang属性に適切な言語を指定することで、
 スクリーンリーダーなどの支援技術を用いているユーザーにも正しい発音規則を提供する ビジュアルブラウザは、文字や書体を正しく表示する メディアプレイヤーは、キャプションを正しく表示する 自動翻訳、検索エンジンでインデックスされやすくなる textareaでハイライト表示される  ことができ、全てのユーザーがコンテンツを理解しやすくなる。 また、部分的にページ全体と異なる言語を適用する場合、その要素に個別にlang属性を定義すると尚良い。
テスト・チェック方法 マークアップ時、コードレビューによるチェックを行う
実装方法 良い実装例 HTML文書の内容が日本語の場合 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;  部分的に異なる言語を適用する場合 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; ... &amp;lt;body&amp;gt; ... &amp;lt;h3 lang=&amp;quot;en&amp;quot;&amp;gt;How to use&amp;lt;/h3&amp;gt; ...  参考文献  WCAG 2.0対応項目：原文 3.1.1 Language of Page WCAG 2.0対応項目：和訳 3.1.1 ページの言語 html 要素の lang 属性を使用する  </description>
    </item>
    
    <item>
      <title>3.1.3 一般的でない用語は補足説明をする</title>
      <link>https://openameba.github.io/a11y-guidelines/3/1/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/1/3/</guid>
      <description> 3.1.3 一般的でない用語は補足説明をする 一般的に使われていない用語やサービス独自の用語を使うと、ユーザーが内容を理解するのに時間がかかり、サービス側の意図した内容が十分に伝わらない可能性がある。
そのため、次のような方法で補足説明をする。
 用語集に定義を掲載する（ヘルプページへのリンクなど） ページ末尾での説明 ツールチップを使った説明 初めて使われるときにカッコ書きで説明を記載する  テスト・チェック方法  用語の補足説明を行なっているリンクや表示があるか 第三者が見たときに意味が伝わるか  参考文献  WCAG 2.0対応項目：原文3.1.3 Unusual Words WCAG 2.0対応項目：和訳3.1.3 一般的ではない用語 一般的ではない用語: 達成基準 3.1.3 を理解する  </description>
    </item>
    
    <item>
      <title>3.1.5 難しい文章表現を避ける</title>
      <link>https://openameba.github.io/a11y-guidelines/3/1/5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/1/5/</guid>
      <description> 3.1.5 難しい文章表現を避ける コンテンツは、できる限りわかりやすく簡潔に書かれているべきである。固有名詞や題名以外のテキストで、難解な言い回しや表現を避けるべきである。読解レベルは中学3年生が読めるものであれば問題ないと言えるが、その評価は難しい。
もし難解な表現を使わざるを得ない場合は、要約や図解、音声を利用できるなどの補足があると良い。
読みやすいテキストや図解があると、ほとんどのユーザーにとっても理解しやすくなる。そのなかでも、ディスクレシアなどの読字障害のユーザーには特に効果がある。
テスト・チェック方法 1. textlintなどの校正ツールを使用する Atomエディタなどにtextlintをインストールしておく。文章作成時に、日本語として不適切な表現を指摘してくれるため、文章校正に用いることができる。
ほかにも、機械的に判断できる日本語の文章難易度の評価にはjReadabilityなどのツールがある。
  textlintを設定しているAtomエディタの使用イメージ。文法的に不適切な箇所にエラーが表示されている。   2. 文章作成後に複数人に確認してもらう 次のような確認項目を挙げることはできるが、適切なテスト手法はない。文章作成後、複数人に確認してもらうなどのフローを挟むことを推奨する。
 段落、文章、単語を短くする。長い文は分割を検討する 専門的な用語や俗語などの言い回しを避け、一般的な単語を選ぶ  対象ユーザーに適した単語の選択かどうかの視点も重要である  冗長な単語を取り除く 単語やフレーズを複数並べる場合、文章よりもリストの方が読みやすくならないかを検討する 受動態の文は能動態にできないかを検討する 名前やラベルに一貫性を持たせる  参考文献  Understanding Success Criterion 3.1.5 | Understanding WCAG 2.0 達成基準 3.1.5 を理解する | WCAG 2.0解説書 G86: 前期中等教育レベルを超えた読解力を必要としないテキストで要約を提供する | WCAG 2.0 達成方法集 G103: アイデア、事象及びプロセスの説明を理解しやすくするために、視覚的な図画、写真及びシンボルを提供する | WCAG 2.0 達成方法集 G153: テキストを読みやすくする | WCAG 2.0 達成方法集  </description>
    </item>
    
    <item>
      <title>3.2.1 フォーカス時にコンテンツを大きく変更しない</title>
      <link>https://openameba.github.io/a11y-guidelines/3/2/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/2/1/</guid>
      <description> 3.2.1 フォーカス時にコンテンツを大きく変更しない フォーカスを受け取ったときに、ユーザーが意図しない変更はしない。
視覚障害や運動障害のあるユーザーは、キーボードなどで操作を行うことがある。フォーカスで次の「悪い例」のような変更が起きると、操作を完了できない恐れがある。クリックやエンターキーで行うのが望ましい。
具体例 悪い例 要素にフォーカスした時、次のような「コンテキストの変化」を起こすこと。
 フォームが自動的に送信される 新しいウィンドウを開く ページ内の現在位置を移動したり別のページに移動したりさせるコンポーネント  レビュー・テスト方法 マークアップ実装時、コードレビューによるチェック
参考文献  WCAG 2.0対応項目：原文 3.2.1 On Focus WCAG 2.0対応項目：和訳 3.2.1 フォーカス時 新しいウィンドウを開くときには利用者へ事前に知らせる  </description>
    </item>
    
    <item>
      <title>3.2.2 予測できない変化を起こさない</title>
      <link>https://openameba.github.io/a11y-guidelines/3/2/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/2/2/</guid>
      <description>3.2.2 予測できない変化を起こさない フォーム入力時に、下記のようなユーザーが予測できないような動作を行うと混乱させてしまう可能性がある。また、全盲の人や特定の認知能力の低下している人などには、変化に気づきづらい・気を取られるなど操作が困難になってしまう可能性がある。そのためユーザーが予測できない動作は行わないようにする。
 ラジオボタンやチェックボックスの選択で、ポップアップを開いてしまう フォームの最後の項目を入力すると、自動的にフォームを送信してしまう  3.2.5 要求による変化 では、ログアウト後の5秒経過したら画面で自動的にTOPに戻すなど、ページ全体で予測できない変化は起こさないのが望ましいとされている。
具体例 新規タブやポップアップを開くことを事前に伝える   Good  新規タブを開くリンクの横には、それを示すアイコンが表示されている。ユーザーはそのリンクを開くと起きる動作が予測できる。   セレクトボックスの具体例 決定ボタンのあるフィルターコンポーネントの例     Good  決定ボタンを押した時にフィルター操作を実行する        Bad  選択しただけでフィルター操作が実行されてしまう。キーボードで操作しているユーザーは、選択肢を上下に移動するだけでフィルター操作が実行されてしまうことになる。     決定ボタンのないフィルターコンポーネントの例     Good  フィルター上を上下キーで移動して、決定ボタン（スペース）を押して、はじめて実行される。標準的なセレクトボックスの挙動と一致している。        Bad  フィルター上を上下キーで移動するだけでフィルター操作が実行されてしまう。予測できない動作であり、ユーザーは目的のフィルター条件に達するまで何度も実行しなくてはならない。     レビュー・テスト方法  企画時、デザイン時、実装時に、下記をチェックする  各コントロール（ラジオボタンやリンク、フォーム要素など）を選択した時の動作を確認する ユーザーが想定できない挙動を自動で行っていないかを確認する   参考文献  WCAG 2.</description>
    </item>
    
    <item>
      <title>3.2.3 ナビゲーションの位置を統一する</title>
      <link>https://openameba.github.io/a11y-guidelines/3/2/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/2/3/</guid>
      <description> 3.2.3 ナビゲーションの位置を統一する サービス内で繰り返し表示されるナビゲーションの位置を、画面ごとに変えず、同じ順序で表示する。
詳細 ウェブサービスでは、グローバルナビゲーションなどのコンポーネントがサービス内で繰り返し表示されることがよくある。しかし、画面ごとにナビゲーションの位置が変わると、回遊するユーザーは画面ごとにナビゲーションを探さなければならなくなる。順序を統一することで、あらゆるユーザーが、より素早く目的のコンテンツにたどり着きやすくなる。（ナビゲーションを表示しないことを薦めるものではない）
スクリーンリーダーや拡大鏡を用いて閲覧しているユーザーへの影響は特に大きい。同じ操作で読み飛ばすことができず、画面ごとに全てのナビゲーションを確認し直すことになり、非常に不便になる。
また、あらかじめ表示される位置をユーザーがわかっていれば、誤タップの防止や次のアクションをしやすくなるという利点もある。
具体例 たとえば、
 検索ボックスを画面によって上に置いたり下に置いたりしない パンくずリストは常にヘッダーの下に配置する 操作の実行ボタンは常にヘッダー内の右に配置する  などすれば、ナビゲーションを用いないときにはその次のコンテンツまでスキップすれば良く、用いるときには視覚的な位置感覚で探すことが簡単になる。
例外 ナビゲーションの位置をユーザーが変更する場合は例外とする。
テスト・チェック方法 企画・デザイン時 ワイヤーフレームの作成時に、ナビゲーションの順序がサービス内で統一されているかを確認する。
なお、ナビゲーションがサービス内で同じサイズであることも重要だが、詳しくは3.2.4で解説する。
参考文献  達成基準 3.2.3 を理解する | WCAG 2.0解説書  </description>
    </item>
    
    <item>
      <title>3.2.4 一貫した識別性を持たせる</title>
      <link>https://openameba.github.io/a11y-guidelines/3/2/4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/2/4/</guid>
      <description> 3.2.4 一貫した識別性を持たせる 同一サービス内で同じ機能のコンポーネントは、同じ見た目・ラベリングにする。ワーディングリストやスタイルガイドで定義と用途を記載することが望ましい。
具体例 悪い例  カメラのアイコンが撮影機能と画像という意味で使われている 検索機能に、あるページだと「検索」、あるページだと「探す」というラベリングをつけている    Bad  カメラのアイコンが画像一覧と撮影機能両方を表してしまっている。   テスト・チェック方法  企画時 デザインレビュー 実装後  参考文献  WCAG 2.0対応項目：原文 Guideline 3.2.4 Consistent Identification WCAG 2.0対応項目：和訳 一貫した識別性:達成基準 3.2.4 を理解する  </description>
    </item>
    
    <item>
      <title>3.3.1 エラーを特定できる</title>
      <link>https://openameba.github.io/a11y-guidelines/3/3/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/3/1/</guid>
      <description> 3.3.1 エラーを特定できる 入力エラーが自動的に検出された場合は、エラーとなっている箇所が特定され、ユーザーにテキストで説明される。
エラーメッセージは、次のような方法でわかりやすく、見やすい場所に配置すること。
 各componentの近くにエラーテキストを表示するUIにする 詳細なエラーを伝えることが難しい場合、ヘルプページへのリンクなどを用意する     Good  エラーとなっている入力項目の近くにエラーメッセージを表示している       Bad  エラーとなっている項目と無関係な位置にエラーメッセージを表示している。また、エラーの該当箇所や理由を説明していない。ユーザーはエラーの原因を推測し、入力箇所を探す必要がある。     テスト・チェック方法  企画時、デザイン時、実装時に、下記をチェックする  エラー箇所の洗い出し エラー文言の検討 エラー文言の表示位置  テスト時  エラー発生時に、エラーの箇所が示され、解消手段がテキストで示されているか   参考文献  WCAG 2.0対応項目：原文 Error Identification: Understanding SC 3.3.1 WCAG 2.0対応項目：和訳 エラーの特定: 達成基準 3.3.1 を理解する   </description>
    </item>
    
    <item>
      <title>3.3.2 入力項目にラベルまたは説明をつける</title>
      <link>https://openameba.github.io/a11y-guidelines/3/3/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/3/2/</guid>
      <description> 3.3.2 入力項目にラベルまたは説明をつける コンテンツがユーザーの入力を要求する場合は、ラベル（項目名）または説明文をつける。
クリック範囲や紐付けなどは、適切なマークアップを行い、長文の場合は常に表示させなくても良い。ユーザーが入力をしようとフォーカスした時に読み上げられることが重要。 ただし、placeholderをラベル代わりに使うと、入力中に分からなくなるため避ける。
具体例    Good  フォームの外にラベルがあり、常に確認することができる。       Bad  placeholderをラベル代わりにしている。入力中にはラベルが表示されないため、何を入力中なのかわからなくなってしまう。     テスト・チェック方法  企画時 デザインレビュー コードレビュー 実装後  参考文献  WCAG 2.0対応項目：原文 Guideline 3.3.2 Labels or Instructions: WCAG 2.0対応項目：和訳 ラベル又は説明: 達成基準 3.3.2 を理解する  </description>
    </item>
    
    <item>
      <title>3.3.3 エラーの修正を提案する</title>
      <link>https://openameba.github.io/a11y-guidelines/3/3/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/3/3/</guid>
      <description>3.3.3 エラーの修正を提案する 入力エラーを機械的に検出でき、修正方法がある場合、エラーの修正方法をユーザーに表示する。ただし、提示することでセキュリティやコンテンツの目的を損なう場合は除く。
具体例  悪い例：「〇〇エラー」 良い例：「〇〇エラーです。××を△△に修正してください」  良くあるエラー例と修正方法例 下記に良くある例を示す。サービスごとに統一した文言があるとなお良い。
 必須項目の入力漏れ：〇〇は必須項目です 入力可能な文字以外を入力したエラー：〇〇は半角英数字のみで入力してください  注釈：プログラムで置換可能なものは、エラーを出すよりもプログラム側で変換することが望ましい  サーバーエラー：しばらく時間をおいてから再度お試しください  セキュリティ的な例外 ID・パスワード入力の回避方法を入れてはいけない。どちらかが存在していることがわかってしまうからである。その場合は「IDまたはパスワードが間違っています」と表現をぼかすようにする。
レビュー・テスト方法  企画時 デザインレビュー 実装後  実装方法 type, required, pattern, min, max属性など用いると、JavaScriptを使わなくてもフォーム検証を行うことができる。 フォームデータの検証 - ウェブ開発を学ぶ | MDNや制約の検証 - HTML | MDNが参考になる。
pattern属性によるフォーム検証 pattern属性に含めた文字列（正規表現可）のみ送信できる。
&amp;lt;form&amp;gt; &amp;lt;label for=&amp;quot;choose&amp;quot;&amp;gt;What&#39;s name is this blog service?&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;choose&amp;quot; name=&amp;quot;service_name&amp;quot; required pattern=&amp;quot;ameba blog|ameblo&amp;quot;&amp;gt; &amp;lt;button&amp;gt;submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt;    Good  pattern属性を用いた入力フォームの例。「ameba blog」と「ameblo」のみ送信が可能になる。それ以外の文字列を入力して送信すると「指定されている形式で入力してください」などのvalidationエラーの文言が入力欄付近に表示される。   required属性によるフォーム検証 required属性を持つ入力項目が空のとき、送信できない。</description>
    </item>
    
    <item>
      <title>3.3.4 入力時のエラーを回避できる</title>
      <link>https://openameba.github.io/a11y-guidelines/3/3/4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/3/4/</guid>
      <description> 3.3.4 入力時のエラーを回避できる 法的・金銭の発生する取引・データの修正や削除に関わる操作をユーザーが行うとき、取り消し・修正・確認ができるようにする。
このような操作は、ミスによって起きる影響が重大である。そのため、次のようにしておくことで、ユーザーがミスした時にユーザーが重大な損益を被らないようにする。
 取り消し：操作を取り消すことができる 修正：入力したデータのエラーがチェックされ、ユーザーが修正できる 確認：操作を完了する前に、ユーザーが情報を見直して確認・修正ができる  具体的には十分な達成方法 - WCAG 2.0 クイックリファレンスが参考になる。
具体例 発生しやすいミスの具体例  連絡先を書き間違える 誤って記事を上書きしてしまう バックアップを取らずに必要な記事を削除してしまう 誤ってキーを押してしまい操作が実行されてしまう チケットの購入枚数を間違える 払い戻し不可の航空券の発着日を間違えて購入する  あくまで一例であり、ユーザーがどんなミスをしてしまうかはサービス側で特定できない。そのため、ミスが起きないように作る、ミスが発生した時に修正・取り消しできることが重要である。
テスト・チェック方法 ユーザーの入力と送信が必要となる工程で、下記のいずれかが担保されていること
 実行前に内容を確認する 実行後に修正できる 実行後に取り消しできる  参考文献  Understanding Success Criterion 3.2.2 | Understanding WCAG 2.0 達成基準 3.3.4 を理解する | WCAG 2.0解説書 十分な達成方法 - WCAG 2.0 クイックリファレンス  </description>
    </item>
    
    <item>
      <title>3.3.5 状況に応じたヘルプが利用できる</title>
      <link>https://openameba.github.io/a11y-guidelines/3/3/5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://openameba.github.io/a11y-guidelines/3/3/5/</guid>
      <description> 3.3.5 状況に応じたヘルプが利用できる ユーザーの状況に応じたヘルプを、ユーザーが必要な時に利用できる。そのためにヘルプは、ユーザーがはっきりと認識できるところに示す。
一例として次のような方法がある
 ウェブページ内に、ヘルプページへのリンクをいれる スペルチェック機能やテキストの入力候補を表示する 入力欄の前に、入力欄の内容を説明する説明文・ラベルをつける 入力欄の横に、入力例を表示する 要素をマウスオーバーした際に、ツールチップなどで補足説明をする  title属性を使うことでも代替できる   具体例 入力欄の前に適切なラベルが設定されている 良い例 ラベルを見ただけで、ユーザーはなにをするべきか理解できる。
悪い例 プレースホルダーのみに説明・入力例がある。これだと次のような問題が起きやすい
 入力中に読めない プレースホルダーのテキストの色が薄すぎて読めない  一般的ではない用語に注釈がある    Good  あるWebサービス内でのみ使用されている一般的でない用語について、ユーザーが内容や説明を確認することができる。       Bad  一般的でない用語の説明やヘルプページへの動線がなく、ユーザーは内容や説明を確認できない。     テスト・チェック方法  企画時  機能の追加・更新時に、次のような箇所で説明があるか。  ヘルプページ  前提として、遷移先であるヘルプページは、ユーザー環境に依存することなく確認できることが望ましい。   参考文献  WCAG 2.0対応項目：原文 3.3.5 Help WCAG 2.0対応項目：和訳 3.3.5 ヘルプ  </description>
    </item>
    
  </channel>
</rss>